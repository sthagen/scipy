! Signatures for f2py-wrappers of FORTRAN LAPACK Positive Definite Tridiagonal Matrix functions.
!

subroutine <prefix>ptsv(n, nrhs, d, e, b, info)
    callstatement (*f2py_func)(&n, &nrhs, d, e, b, &n, &info);
    callprotoargument int*, int*, <ctypereal>*, <ctype>*, <ctype>*, int*, int*
    integer intent(hide), depend(d) :: n = len(d)
    integer intent(hide), depend(b) :: nrhs = shape(b, 1)
    <ftypereal> dimension(n), intent(in,out,copy) :: d
    <ftype> dimension(n-1), intent(in,out,copy,out=du), depend(n) :: e
    <ftype> dimension(n,nrhs), intent(in,out,copy,out=x), depend(n), check(shape(b,0)==n) :: b
    integer intent(out) :: info

end subroutine <prefix>ptsv


subroutine <prefix>pttrf(n, d, e, info)
    ! d, e, info  = pttrf(d, e, overwrite_d=0, overwrite_e=0)
    !
    ! ?PTTRF computes the L*D*L**T factorization of a symmetric positive
    ! definite tridiagonal matrix A.  The factorization may also be regarded
    ! as ! having the form A = U**T*D*U.

    callstatement (*f2py_func)(&n, d, e, &info)
    callprotoargument int*, <ctypereal>*, <ctype>*, int*

    integer intent(hide), depend(d) :: n = len(d)
    <ftypereal> intent(in, out, copy), dimension(n) :: d
    <ftype> intent(in, out, copy), dimension((n>0?n-1:0)), depend(n) :: e
    integer intent(out) :: info

end subroutine <prefix>pttrf


subroutine <prefix2>pttrs(n, nrhs, d, e, b, ldb, info)
    ! x, info  = pttrs(d, e, b, overwrite_b=0)
    !
    ! DPTTRS solves a tridiagonal system of the form
    ! 
    !     A * X = B
    !
    ! using the L*D*L**T factorization of A computed by DPTTRF.  D is a
    ! diagonal matrix specified in the vector D, L is a unit bidiagonal
    ! matrix whose subdiagonal is specified in the vector E, and X and B
    ! are N by NRHS matrices.

    callstatement (*f2py_func)(&n, &nrhs, d, e, b, &ldb, &info)
    callprotoargument int*, int*, <ctype2>*, <ctype2>*, <ctype2>*, int*, int*

    integer intent(hide), depend(d) :: n = len(d)
    <ftype2> intent(in), dimension(n) :: d
    <ftype2> intent(in), dimension((n>0?n-1:0)), depend(n) :: e
    <ftype2> intent(in, out, copy, out=x), dimension(ldb, nrhs) :: b
    integer intent(hide), depend(b) :: ldb = MAX(1, shape(b, 0))
    integer intent(hide), depend(b)  :: nrhs = shape(b, 1)
    integer intent(out) :: info

end subroutine<prefix2>pttrs


subroutine <prefix2c>pttrs(lower, n, nrhs, d, e, b, ldb, info)
    ! x, info  = pttrs(d, e, b, lower=0, overwrite_b=0)
    !
    ! ?PTTRS solves a tridiagonal system of the form
    !
    !     A * X = B
    !
    ! using the L*D*L**T factorization of A computed by DPTTRF.  D is a
    ! diagonal matrix specified in the vector D, L is a unit bidiagonal
    ! matrix whose subdiagonal is specified in the vector E, and X and B
    ! are N by NRHS matrices.

    callstatement (*f2py_func)((lower?"L":"U"), &n, &nrhs, d, e, b, &ldb, &info)
    callprotoargument char*, int*, int*, <ctype2>*, <ctype2c>*, <ctype2c>*, int*, int*

    integer optional, intent(in), check(lower==0||lower==1) :: lower = 0
    integer intent(hide), depend(d) :: n = len(d)
    <ftype2> intent(in), dimension(n) :: d
    <ftype2c> intent(in), dimension((n>0?n-1:0)), depend(n) :: e
    <ftype2c> intent(in, out, copy, out=x), dimension(ldb, nrhs) :: b
    integer intent(hide), depend(b) :: ldb = MAX(1, shape(b, 0))
    integer intent(hide), depend(b)  :: nrhs = shape(b, 1)
    integer intent(out) :: info

end subroutine<prefix2c>pttrs
